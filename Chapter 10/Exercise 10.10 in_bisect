"""
Exercise 10.10. To check whether a word is in the word list, you could use the in operator, but it
would be slow because it searches through the words in order.

Because the words are in alphabetical order, we can speed things up with a bisection search (also
known as binary search), which is similar to what you do when you look a word up in the dictionary
(the book, not the data structure). You start in the middle and check to see whether the word you are
looking for comes before the word in the middle of the list. If so, you search the first half of the list
the same way. Otherwise you search the second half.

Either way, you cut the remaining search space in half. If the word list has 113,809 words, it will
take about 17 steps to find the word or conclude that it’s not there.

Write a function called in_bisect that takes a sorted list and a target value and returns True if
the word is in the list and False if it’s not.
"""

def createWordlist():
    """ Reads a file containing a list of words and appends each word to a list.
    
    returns: a list of strings/words
    """
    wordlist = []
    fin = open(r"C:\Users\joelt\Desktop\Python Course\Think Pytho\words.txt")
    for word in fin:
        wordlist.append(word.strip())
    return wordlist

def in_bisect(wordlist, word):
    """ Uses bisection search to check whether a word/string appears in a list
    of words/strings.
    
    Assumes words/strings in list are sorted
    
    wordlist: list of words/strings
    word: string
    
    returns: True if word is in list, False otherwise
    """
    if 0 == len(wordlist):
        return False
    i = len(wordlist)//2
    if wordlist[i] == word:
        return True
    elif wordlist[i] > word:
        return in_bisect(wordlist[:i], word)
    else:
        return in_bisect(wordlist[i+1:], word)
