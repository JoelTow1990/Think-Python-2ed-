"""
Exercise 10.8. This exercise pertains to the so-called Birthday Paradox, which you can read about
at http: // en. wikipedia. org/ wiki/ Birthday_ paradox .

If there are 23 students in your class, what are the chances that two of you have the same birthday?

You can estimate this probability by generating random samples of 23 birthdays and checking for
matches. Hint: you can generate random birthdays with the randint function in the random
module.
"""

def has_duplicates(t):
    """Assumes t is a list, returns true if any element of the list occurs
    more than once in the list"""
    copy = sorted(t.copy())
    for i in range(len(copy)-1):
        if t[i]==t[i+1]:
            return True
    return False
    
def random_days(n):
    """ Returns a list of length n, each element of list is a number between 1
    and 365.
    n: int
    return: list of ints
    """
    import random
    daylist = []
    count = 0
    for num in range(n):
        daylist.append(random.randint(1,365))
    return daylist

def count_matches(students, simulations):
    """Counts duplicates in a sample of birthdays generated by a given number
    of students.
    students: number of students in group
    simulations: number of simulations to run
    returns: int
    """
    count = 0
    for num in range(simulations):
        birthdays = random_days(students)
        if has_duplicates(birthdays):
            count += 1
    return count

def birthday_paradox():
    students = 23
    simulations = 10000
    result = count_matches(students,simulations)
    print("After ",simulations," simulations with ", students," students, ")
    print("There were ",result, " simulations with at least one birthday match.")
